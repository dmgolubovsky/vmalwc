#! /bin/bash -ex

# stolen from the original coreos run script.

find_ssh_keys() {
    for default_key in ~/.ssh/id_*.pub; do
        if [ ! -f "$default_key" ]; then
            continue
        fi
        cat "$default_key"
    done
}

write_ssh_keys() {
    echo "#cloud-config"
    echo "ssh_authorized_keys:"
    sed -e 's/^/ - /'
}

CONFIG_DRIVE=$(mktemp -t -d loadcore-configdrive.XXXXXXXXXX)
if [ $? -ne 0 ] || [ ! -d "$CONFIG_DRIVE" ]; then
    echo "$0: mktemp -d failed!" >&2
    exit 1
fi
trap "rm -rf '$CONFIG_DRIVE'" EXIT
mkdir -p "${CONFIG_DRIVE}/openstack/latest"

# Copy the host local time file to the config drive

cp -H /etc/localtime "${CONFIG_DRIVE}/host-localtime"

TOP=`dirname $0`

[ $TOP = "." ] && TOP=`pwd`

WDIR=${WDIR:-/tmp}

source $TOP/bldconfig

KERNEL=${KERNEL:-$TOP/external/linux-$KERVERSION/arch/x86_64/boot/bzImage}
KVM=${KVM:-$TOP/external/qemu-$QEMUVERSION/x86_64-softmmu/qemu-system-x86_64}
XDISPLAY=`echo $DISPLAY | tr -d ':' | cut -d. -f 1`

# Obtain the coreos version number for shell prompt from the cromeos' own load script

COREDIR=$TOP/external/coreos

if [ -r $COREDIR/coreos_production_qemu.sh ] ; then
	name=$(grep "^VM_NAME" $COREDIR/coreos_production_qemu.sh | head -n 1 | cut -d"=" -f 2 | tr -d \'\")
fi

name=${name:-loadcore}

# Find the pulseaudio server listening address if any

eval `pax11publish -i`

if [ -z "$PULSE_SERVER" ] ; then
        export PULSE_SERVER=unix:`pactl info|grep "^Server String:"|cut -d":" -f 2|tr -d ' '`
fi

# If does not exist, create a btrfs volume of 1/3 space available for the work area path

IMGSTOR="$WDIR/imagestore"

if [ ! -f $IMGSTOR ] ; then
	df=`df --output=avail $WDIR | tail -n 1`
	imsz=$(($df/3))
	fallocate -l ${imsz}K $IMGSTOR
	/sbin/mkfs.btrfs $IMGSTOR || mkfs.btrfs $IMGSTOR
fi

# Extract the SSH public key for the current user

sshkey=$(find_ssh_keys)

# Copy current user information to the coreos environment.

(
	echo USER=$USER
	echo HOME=$HOME
	echo hostaddr=`ip route get 1 | awk '{print $NF ; exit}'`
) > $CONFIG_DRIVE/user_environment

# Zip the opt/vmalwc directory on the host to place the zipfile to the config drive

(
	cd $TOP/extrafiles
	zip -r $CONFIG_DRIVE/opt.vmalwc.zip ./opt
)

# Create an user for coreos with the same name as the current user, enable public key login.
# Add a number of systemd units to run at start.

( 
cat <<EOF
#cloud-config
users:
  - name: $USER
    homedir: $HOME
    groups:
      - wheel
      - docker
      - systemd-journal
      - portage
      - core
      - sudo
    ssh-authorized-keys:
      - $sshkey
coreos:
  units:
    - name: vmalwc-ready.target
      command: start
      content: |
        [Unit]
        Description=Ready to run vmalwc containers
        Requires=copy-host-files.service
        After=copy-host-files.service
    - name: copy-host-files.service
      content: |
        [Unit]
        Requires=var-lib-machines.mount
        After=var-lib-machines.mount
        [Service]
        Type=simple
        WorkingDirectory=/
        ExecStartPre=/bin/rm -f /etc/localtime
        ExecStartPre=/bin/cp /media/configvirtfs/host-localtime /etc/localtime
        ExecStartPre=/bin/mkdir -p /etc/vmalwc /opt/vmalwc
        ExecStartPre=/bin/cp /media/configvirtfs/user_info /etc/vmalwc/environment
        ExecStartPre=/bin/cp /media/configvirtfs/user_environment /etc/vmalwc/user_environment
        ExecStartPre=/bin/sh -c "echo NUID=`id -u $USER` >> /etc/vmalwc/user_environment"
        ExecStartPre=/sbin/usermod -u `id -u $USER` $USER
        ExecStartPre=/usr/bin/unzip /media/configvirtfs/opt.vmalwc.zip
        ExecStartPre=/opt/bin/mount9ptags
        ExecStartPre=/opt/vmalwc/btrfs_cleanup
        ExecStartPre=/usr/bin/systemctl stop update-engine.service
        ExecStart=/opt/bin/findapps
        ExecStartPost=/usr/bin/systemctl mask update-engine.service
    - name: remove-default-user.service
      command: start
      content: |
        [Service]
        Type=oneshot
        ExecStart=/sbin/userdel core
    - name: var-lib-machines.mount
      command: start
      content: |
        [Mount]
        What=/dev/vdb
        Where=/var/lib/machines
        Type=btrfs
EOF
) >> $CONFIG_DRIVE/openstack/latest/user_data

# For any file specified on the command line, treat it as a systemd unit and try
# to add to the cloud config file. Use the X-cloud-config-command line to form the command parameter.

(
	for s in $TOP/baseunits/* "$@" ; do
		if [ ! -r $s ] ; then
			continue
		fi
		case $s in
			*~)
			continue
			;;
			*)
		esac
		ucmd=$(grep "X-cloud-config-command=" $s | cut -d= -f 2)
		indent="    "
		echo "${indent}- name: $(basename $s)"
		if [ ! -z "$ucmd" ] ; then
			echo "${indent}  command: $ucmd"
		fi
		echo "${indent}  content: |"
		cat $s | sed "s/^/${indent}    /g"
done
) >> $CONFIG_DRIVE/openstack/latest/user_data

mkdir -p $TOP/workarea/sdme

rm -f $TOP/workarea/sdme/*

cpid=0

waitssh() {
	while true ; do
		s=`echo "" | socat stdio localhost:2222 | grep -i SSH | wc -l`
		if [ $s -ne 0 ] ; then
			return
		fi
		sleep 1
	done
}

if ! ( seq 0 20 100 | while read ; do sleep 1 ; echo $REPLY ; done | \
	zenity --progress --auto-close --no-cancel --text="Press Esc for console window") ; then
	(
		
		FONT=${FONT:-terminus-16}
		ssh-keyscan -v -p 2222 -T 20 -t dsa,ecdsa,ed25519 localhost

		cd $WDIR

		stopkvm() {
			cd $WDIR
			vmon=`find . -name "$$-loadcore*.monitor" || exit 0`
			[ ! -z "$vmon" ] && echo quit | socat stdio "unix-connect:$vmon"
			sleep 1
			pidf=`find . -name "$$-loadcore*.pid" || exit 0`
			[ ! -z "$pidf" ] kill -INT `cat $pidf`
		}

		xterm -fn $FONT -fg lightgreen -bg black -title "$name: Console [$$]" \
			-geometry 100x40 -e ssh -q -o StrictHostKeyChecking=no -p 2222 \
			localhost
		stopkvm
	) &
	cpid=$!
fi

$TOP/bin/fghc -id $$-loadcore -mem 2G -kvm  $KVM -workdir $WDIR -video -audio -xdisplay $XDISPLAY \
	-hostname $name \
	-step loadcore -host -lbrst -xkernel $KERNEL -fwd 2222:22 -info $CONFIG_DRIVE/user_info \
		       -lib conf -path $CONFIG_DRIVE -ro -tag config-2 \
		       -lib core -path $COREDIR/coreos_production_qemu_image.img -snap -rw \
 		       -lib workarea -path $TOP/workarea -rw \
 		       -lib persistent_home -path $TOP/workarea/phome -rw \
 		       -lib shutdown_me -path $TOP/workarea/sdme -rw \
 		       -lib startup -path $TOP/units -rw \
		       -lib imgstor -path $IMGSTOR -rw \
	-make

[ $cpid -ne 0 ] && kill -9 $cpid


if [ $conw = 1 ] ; then

else
	while true ; do
		[ -e $TOP/workarea/sdme/shutdown.me ] && {
			stopkvm
			exit
		}
		sleep 1
	done
fi

